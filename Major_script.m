%
N = 116;% number of nodes
Sub1 = 26;%number of DE subject
Sub2 = 66; %number of o De subjects
pw = 25 ; %number of individual sparsities for global metrics
MAX_MST = 2;%Arbitray number bigger than 1 in order for the convert minimum spanning tree to maximum spanning tree
ThreshS_Pathlenght_CC = zeros(pw*Sub1,1);
ThreshS_Cluster_CC = zeros(pw*Sub1,1);
ThreshS_GlobalEFF_CC = zeros(pw*Sub1,1);
ThreshS_Pathlenght_RC = zeros(pw*Sub2,1);
ThreshS_Cluster_RC = zeros(pw*Sub2,1);
ThreshS_GlobalEFF_RC = zeros(pw*Sub2,1);
Counting1 = 0;
Counting = 0;
count = 0;
count1 = 0;
LTH = 0.12; %Local Threshold
%%%%%%%%%%%%%%%%%%%%%%%%DE%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%(Control)Getting one scelton per subject for all thresholds
for Z=1:Sub1;
    filenameCC=['matrixcont_HC' num2str(Z)];
    KR.(filenameCC) = abs(DE_FishZ116.(filenameCC));
    Back1.(filenameCC) = KR.(filenameCC);
    for k =1:N;
      for s = k+1:N;
                       KR.(filenameCC)(k,s) = MAX_MST - KR.(filenameCC)(k,s);%put maximum correlations into the minimum place to be in MST
                       KR.(filenameCC)(s,k) = KR.(filenameCC)(k,s);%make it symmetric
      end
    end
    [mst_CC.(filenameCC),cost_CC.(filenameCC)] = prim(KR.(filenameCC));
    SCLT_CC.(filenameCC) = zeros(N,N);
    for i = 1:N-1;
       SCLT_CC.(filenameCC)(mst_CC.(filenameCC)(i,1),mst_CC.(filenameCC)(i,2))= SCLT_CC.(filenameCC)(mst_CC.(filenameCC)(i,1),mst_CC.(filenameCC)(i,2)) ...
       +Back1.(filenameCC)(mst_CC.(filenameCC)(i,1),mst_CC.(filenameCC)(i,2));
       SCLT_CC.(filenameCC)(mst_CC.(filenameCC)(i,2),mst_CC.(filenameCC)(i,1))= SCLT_CC.(filenameCC)(mst_CC.(filenameCC)(i,2),mst_CC.(filenameCC)(i,1)) ...
       +Back1.(filenameCC)(mst_CC.(filenameCC)(i,1),mst_CC.(filenameCC)(i,2));
       Back1.(filenameCC)(mst_CC.(filenameCC)(i,1),mst_CC.(filenameCC)(i,2))= 0;
       Back1.(filenameCC)(mst_CC.(filenameCC)(i,2),mst_CC.(filenameCC)(i,1))= 0;    
    end
end  
  for  Thr1 = 0.02:0.02:0.5;
     Counting = Counting + 1;
    %Calculating sparse matrix for each epilepsy subject in each threshold loop
     for Z=1:Sub1;
         filenameCC=['matrixcont_HC' num2str(Z)];
         Thr1_S35_CC.(filenameCC) = threshold_proportional(Back1.(filenameCC),Thr1);  
         Thr_S35_CC.(filenameCC) = Thr1_S35_CC.(filenameCC)+ SCLT_CC.(filenameCC);
         BinaryMatric_CC.(filenameCC) = weight_conversion(Thr_S35_CC.(filenameCC),'binarize'); 
         ConnectionlengthMatrix_CC.(filenameCC) = weight_conversion(Thr_S35_CC.(filenameCC),'lengths');
     end
   %%%%%binary version%%%%%%%%%%%%%
     for Z=1:Sub1;
         filenameCC=['matrixcont_HC' num2str(Z)];
         Distance1_CC.(filenameCC) = distance_bin(BinaryMatric_CC.(filenameCC));
         PathLength_CC.(filenameCC) = (N/(N-1)).*(mean(Distance1_CC.(filenameCC)));
         P_Length_Ave_CC.(filenameCC) = mean(PathLength_CC.(filenameCC));
         CC_S35_CC.(filenameCC)=clustering_coef_bu([BinaryMatric_CC.(filenameCC)]);
         ClusteringCoeff_CC.(filenameCC) = mean(CC_S35_CC.(filenameCC));%%1
         Effic_S35_CC.(filenameCC)= efficiency_bin([BinaryMatric_CC.(filenameCC)],0);%2
     end
     for X=1:Sub1;
         filename2=['matrixcont_HC' num2str(X)];
         AllSubjects_GlobEff_CC(X,:)=[Effic_S35_CC.(filename2)];
         AllSubjects_Pathlenght_CC(X,:) = [P_Length_Ave_CC.(filename2)];
         AllSubjects_Clustering_CC(X,:) = [ClusteringCoeff_CC.(filename2)];
     end
      ThreshS_Pathlenght_CC((Counting-1)*Sub1+1:Sub1+(Counting-1)*Sub1,:) = AllSubjects_Pathlenght_CC;
      ThreshS_Cluster_CC((Counting-1)*Sub1+1:Sub1+(Counting-1)*Sub1,:) = AllSubjects_Clustering_CC;
      ThreshS_GlobalEFF_CC((Counting-1)*Sub1+1:Sub1+(Counting-1)*Sub1,:) = AllSubjects_GlobEff_CC;
  end
Final_Cluster_CC = reshape(ThreshS_Cluster_CC,[Sub1,pw]);
Final_Path_CC = reshape(ThreshS_Pathlenght_CC,[Sub1,pw]);
Final_GlobalEff_CC = reshape(ThreshS_GlobalEFF_CC,[Sub1,pw]);
%%%%%%Local%%%%%%%%%%
%for LTH = 0.1 : 0.05 : 0.3 
    count = count + 1;
    for Z=1:Sub1;
        filenameCC=['matrixcont_HC' num2str(Z)];
        Thr1L_S35_CC.(filenameCC) = threshold_proportional(Back1.(filenameCC),LTH);  
        ThrL_S35_CC.(filenameCC) = Thr1L_S35_CC.(filenameCC)+ SCLT_CC.(filenameCC);
        BinaryMatric_Local_CC.(filenameCC) = weight_conversion(ThrL_S35_CC.(filenameCC),'binarize'); 
        BC_S35_CC.(filenameCC)=betweenness_bin([BinaryMatric_Local_CC.(filenameCC)])./mean(betweenness_bin([BinaryMatric_Local_CC.(filenameCC)]));%4%Nomalized compared to average BC
        Degree_S35_CC.(filenameCC)=degrees_und([ThrL_S35_CC.(filenameCC)]);
        LocEff_S35_CC.(filenameCC)=efficiency_bin([BinaryMatric_Local_CC.(filenameCC)],1);%for binary
    end
    for X=1:Sub1;
        filename2=['matrixcont_HC' num2str(X)];
        AllSubjects_BC_CC(X,:) = [BC_S35_CC.(filename2)];
        AllSubjects_Degree_CC(X,:) = [Degree_S35_CC.(filename2)];
        AllSubjects_Loceff_CC(X,:) = [LocEff_S35_CC.(filename2)];
    end
    DE_FishZ_BC(:,:,count) = AllSubjects_BC_CC;
    DE_FishZ_DC(:,:,count) = AllSubjects_Degree_CC;
    DE_FishZ_LE(:,:,count) = AllSubjects_Loceff_CC;
%%%%%%%%%%%%%%%%%%%%%%%%NDE%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%(IBD)Getting one scelton per subject for all thresholds
for p=1:Sub2;
    filenameHC=['matrixcont_HC' num2str(p)];
    KIR.(filenameHC) = abs(NDE_FishZ116.(filenameHC));
    Back2.(filenameHC) = KIR.(filenameHC);
    for k = 1:N;
      for s = k+1:N;
                       KIR.(filenameHC)(k,s) = MAX_MST - KIR.(filenameHC)(k,s);%put maximum correlations into the minimum place to be in MST
                       KIR.(filenameHC)(s,k) = KIR.(filenameHC)(k,s);%make it symmetric
      end
    end
    [mst_RC.(filenameHC),cost_RC.(filenameHC)]=prim(KIR.(filenameHC));
    SCLT_RC.(filenameHC)=zeros(N,N); 
    for i=1:N-1; 
       SCLT_RC.(filenameHC)(mst_RC.(filenameHC)(i,1),mst_RC.(filenameHC)(i,2))= SCLT_RC.(filenameHC)(mst_RC.(filenameHC)(i,1),mst_RC.(filenameHC)(i,2)) ...
       +Back2.(filenameHC)(mst_RC.(filenameHC)(i,1),mst_RC.(filenameHC)(i,2));
       SCLT_RC.(filenameHC)(mst_RC.(filenameHC)(i,2),mst_RC.(filenameHC)(i,1))= SCLT_RC.(filenameHC)(mst_RC.(filenameHC)(i,2),mst_RC.(filenameHC)(i,1)) ...
       +Back2.(filenameHC)(mst_RC.(filenameHC)(i,1),mst_RC.(filenameHC)(i,2));
       Back2.(filenameHC)(mst_RC.(filenameHC)(i,1),mst_RC.(filenameHC)(i,2))= 0;
       Back2.(filenameHC)(mst_RC.(filenameHC)(i,2),mst_RC.(filenameHC)(i,1))= 0;   
    end
end
 for Thr = 0.02:0.02:0.5;
    Counting1 = Counting1 + 1;
    for p=1:Sub2;
      filenameHC=['matrixcont_HC' num2str(p)];
      Thr1_S35_RC.(filenameHC) = threshold_proportional(Back2.(filenameHC),Thr);  
      Thr_S35_RC.(filenameHC) = Thr1_S35_RC.(filenameHC)+SCLT_RC.(filenameHC);  
      BinaryMatric_RC.(filenameHC) = weight_conversion(Thr_S35_RC.(filenameHC),'binarize'); 
      ConnectionlengthMatrix_RC.(filenameHC) = weight_conversion(Thr_S35_RC.(filenameHC),'lengths'); 
      Distance1_RC.(filenameHC) = distance_bin(BinaryMatric_RC.(filenameHC));
      PathLength_RC.(filenameHC) = (N/(N-1)).*(mean(Distance1_RC.(filenameHC)));
      P_Length_Ave_RC.(filenameHC) = mean(PathLength_RC.(filenameHC));
      CC_S35_RC.(filenameHC)=clustering_coef_bu([BinaryMatric_RC.(filenameHC)]);
      ClusteringCoeff_RC.(filenameHC) = mean(CC_S35_RC.(filenameHC));
      Effic_S35_RC.(filenameHC)= efficiency_bin([BinaryMatric_RC.(filenameHC)],0);
    end
    for n=1:Sub2;
        filename1=['matrixcont_HC' num2str(n)];
        AllSubjects_GlobEff_RC(n,:)=[Effic_S35_RC.(filename1)];
        AllSubjects_Pathlenght_RC(n,:) = [P_Length_Ave_RC.(filename1)];
        AllSubjects_Clustering_RC(n,:) = [ClusteringCoeff_RC.(filename1)];
    end
        ThreshS_Pathlenght_RC((Counting1-1)*Sub2+1:Sub2+(Counting1-1)*Sub2,:) = AllSubjects_Pathlenght_RC;
        ThreshS_Cluster_RC((Counting1-1)*Sub2+1:Sub2+(Counting1-1)*Sub2,:) = AllSubjects_Clustering_RC;
        ThreshS_GlobalEFF_RC((Counting1-1)*Sub2+1:Sub2+(Counting1-1)*Sub2,:) = AllSubjects_GlobEff_RC;
 end
  Final_Cluster_RC = reshape(ThreshS_Cluster_RC,[Sub2,pw]);
  Final_Path_RC = reshape(ThreshS_Pathlenght_RC,[Sub2,pw]);
  Final_GlobalEff_RC = reshape(ThreshS_GlobalEFF_RC,[Sub2,pw]);
  %%%%%%Local%%%%%%%%%%
  %for LTH = 0.1 : 0.05 : 0.3 
      count1 = count1 + 1;
      for Z=1:Sub2;
          filenameHC=['matrixcont_HC' num2str(Z)];
          Thr1L_S35_RC.(filenameHC) = threshold_proportional(Back2.(filenameHC),LTH);  
          ThrL_S35_RC.(filenameHC) = Thr1L_S35_RC.(filenameHC)+ SCLT_RC.(filenameHC);
          BinaryMatric_Local_RC.(filenameHC) = weight_conversion(ThrL_S35_RC.(filenameHC),'binarize'); 
          BC_S35_RC.(filenameHC)=betweenness_bin([BinaryMatric_Local_RC.(filenameHC)])./mean(betweenness_bin([BinaryMatric_Local_RC.(filenameHC)]));%4%Nomalized compared to average BC
          Degree_S35_RC.(filenameHC)=degrees_und([ThrL_S35_RC.(filenameHC)]);
          LocEff_S35_RC.(filenameHC)=efficiency_bin([BinaryMatric_Local_RC.(filenameHC)],1);%for binary
      end
      for X=1:Sub2;
          filename2=['matrixcont_HC' num2str(X)];
          AllSubjects_BC_RC(X,:) = [BC_S35_RC.(filename2)];
          AllSubjects_Degree_RC(X,:) = [Degree_S35_RC.(filename2)];
          AllSubjects_Loceff_RC(X,:) = [LocEff_S35_RC.(filename2)];
      end
NDE_FishZ_BC(:,:,count1) = AllSubjects_BC_RC;
NDE_FishZ_DC(:,:,count1) = AllSubjects_Degree_RC;
NDE_FishZ_LE(:,:,count1) = AllSubjects_Loceff_RC;
WholeGlobal_NoDE_FishZWhole = [Final_GlobalEff_RC Final_Path_RC Final_Cluster_RC];
WholeGlobal_DE_FishZWhole = [Final_GlobalEff_CC Final_Path_CC Final_Cluster_CC];
WholeLocal_NoDE_FishZ = [ AllSubjects_BC_RC  AllSubjects_Degree_RC AllSubjects_Loceff_RC];
WholeLocal_DE_FishZ = [ AllSubjects_BC_CC  AllSubjects_Degree_CC AllSubjects_Loceff_CC];
%%%%%%%%%%Permutation test Global%%%%%%%%%
nperm = 20000;
x_G = [WholeGlobal_DE_FishZWhole];
y_G = [WholeGlobal_NoDE_FishZWhole];
mean_xG = mean(x_G);
mean_yG = mean(y_G);
for i = 1 : size(x_G,2);
    [pVal_G(1,i),testValue_G(1,i),Confidential_interval_G(1,i)] = permtest_modified(x_G(:,i),y_G(:,i),nperm,'approximate');
end
Global_Permutation(1,:) = mean_xG - mean_yG;
Global_Permutation(2,:) =  + Confidential_interval_G(1,:);
Global_Permutation(3,:) =  - Confidential_interval_G(1,:);
Global_Permutation(4,:) = pVal_G(1,:);
Permutation_GlobalEfficiency = Global_Permutation(:,1:pw);
Permutation_Path = Global_Permutation(:,pw+1:2*pw);
Permutation_Clustering = Global_Permutation(:,2*pw+1:3*pw);
%%%%%%%%%%%%Permutation Test For Local%%%%%%
x_L = [WholeLocal_DE_FishZ];
y_L = [WholeLocal_NoDE_FishZ];
mean_xL = mean(x_L);
mean_yL = mean(y_L);
for i = 1 : size(x_L,2);
    [pVal_L(1,i),testValue_L(1,i),Confidential_interval_L(1,i)] = permtest_modified(x_L(:,i),y_L(:,i),nperm,'approximate');
end
Local_Permutation(1,:) = mean_xL - mean_yL;
Local_Permutation(2,:) =  + Confidential_interval_L(1,:);
Local_Permutation(3,:) =  - Confidential_interval_L(1,:);
Local_Permutation(4,:) = pVal_L(1,:);
%Q_Local_Permutation = mafdr(Local_Permutation(4,:),'BHFDR',true);
%}
%%%%%%%%%%Permutation_Conditional test Global%%%%%%%%%
for i = 1 : size(x_G,2);
    [pVal_Conditional_G(1,i),testValue_Conditional_G(1,i),Confidential_interval_Conditional_G(1,i)] = permtest_Conditional_modified(x_G(:,i),y_G(:,i),Scan,nperm,'approximate');
end
Global_Permutation_Conditional(1,:) = mean_xG - mean_yG;
Global_Permutation_Conditional(2,:) =  + Confidential_interval_Conditional_G(1,:);
Global_Permutation_Conditional(3,:) =  - Confidential_interval_Conditional_G(1,:);
Global_Permutation_Conditional(4,:) = pVal_Conditional_G(1,:);
Permutation_Conditional_GlobalEfficiency = Global_Permutation_Conditional(:,1:pw);
Permutation_Conditional_Path = Global_Permutation_Conditional(:,pw+1:2*pw);
Permutation_Conditional_Clustering = Global_Permutation_Conditional(:,2*pw+1:3*pw);
%%%%%%%%%%%%Permutation_Conditional Test For Local %%%%%%
for i = 1 : size(x_L,2);
    [pVal_Conditional_L(1,i),testValue_Conditional_L(1,i),Confidential_interval_Conditional_L(1,i)] = permtest_Conditional_modified(x_L(:,i),y_L(:,i),Scan,nperm,'approximate');
end
Local_Permutation_Conditional(1,:) = mean_xL - mean_yL;
Local_Permutation_Conditional(2,:) =  + Confidential_interval_Conditional_L(1,:);
Local_Permutation_Conditional(3,:) =  - Confidential_interval_Conditional_L(1,:);
Local_Permutation_Conditional(4,:) = pVal_Conditional_L(1,:);